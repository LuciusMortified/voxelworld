---
description: 
globs: 
alwaysApply: true
---
# C++: Порядок сортировки #include

Во всех C++ файлах порядок директив #include должен быть следующим:

1. Системные заголовки (например, <vector>, <string>, <cstdint>)
2. Заголовки внешних библиотек (например, <vulkan/vulkan.h>, <GLFW/glfw3.h>, <glm/glm.hpp>)
3. Заголовки текущего проекта (например, "engine.h", "voxel_model.h")

Между каждым блоком должен быть пустой разделяющий комментарий или пустая строка.

## Пути к заголовкам проекта

**ВСЕГДА используйте абсолютные пути для заголовков проекта.** Относительные пути запрещены.

```cpp
#include <vector>
#include <string>

#include <vulkan/vulkan.h>
#include <GLFW/glfw3.h>

#include "engine.h"
#include "window.h"
#include "input.h"
```

## Настройка CMake для приложений

**ВСЕГДА добавляйте в CMake файл приложения:**
```cmake
target_link_libraries(${PROJECT_NAME} voxelengine)
```

Это автоматически добавит include директории библиотеки voxelengine к приложению и позволит использовать короткие пути к заголовкам.

## Пример правильного форматирования:

```cpp
#include <iostream>
#include <vector>
#include <string>

#include <vulkan/vulkan.h>
#include <GLFW/glfw3.h>

#include "engine.h"
#include "window.h"
#include "input.h"
#include "camera.h"
#include "renderer.h"
```

## Обязательные действия при создании/редактировании приложений:

1. **В CMake файле приложения** - убедиться что есть `target_link_libraries(${PROJECT_NAME} voxelengine)`
2. **В C++ файлах** - использовать только абсолютные пути для заголовков проекта
3. **Никогда не использовать** относительные пути типа `../../engine/include/`

Это правило распространяется на все новые и существующие C++ файлы в проекте.
